{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}

    <h1>Report</h1>

    <div class="report-nav">
        <a class="report-navlink" href="#kmom01">Kmom01</a>
        <a class="report-navlink" href="#kmom02">Kmom02</a>
        <a class="report-navlink" href="#kmom03">Kmom03</a>
        <a class="report-navlink" href="#kmom04">Kmom04</a>
        <a class="report-navlink" href="#kmom05">Kmom05</a>
        <a class="report-navlink" href="#kmom06">Kmom06</a>
        <a class="report-navlink-project" href="#projekt">Projekt</a>
    </div>

    <h2 class="report-rubric" id="kmom01">Kmom01</h2>
    <div class="report-container">

<p>Har tidigare jobbat med ett objektorienterat fokus i oopython-kursen, så känner mig hyggligt
varm och bekväm i kläderna på ett konceptuellt plan.</p>

<p>Och det handlar ju, som så ofta programmeringspråken emellan, om liknande konstruktioner kring samma
centrala datatyper och koncept som går igen.</p>

<p>En klass definierar strukturen för en objekttyp, både dess properties, i.e värdevariabler, och metoder,
i.e de specifika funktioner som är knutna till klassen och dess objekt.</p>

<p>Utifrån den klassen kan man sedan "skapa", instansiera, ett objekt, där all data och all funktionalitet,
alltså alla dess properties och klasspecifika metoder, finns samlade att tillgå i objektet.</p>

<p>Ett mycket vanligt sätt att jobba är att även etablera en konstruktor, en standardiserad grundmetod, (__magisk metod), som tillåter en att
skicka med argument i instansierandet för att kunna tillskriva objektets properties värden direkt i samband med skapandet.</p>

<p>Det är också i regel rekommenderat att tänka aktivt kring vilka delar av objektets properties och metoder som behöver och ska vara tillgängliga
för en användare, vilket man manipulerar med nyckelorden public, private och protected.</p>

<p>Vanligtvis rekommenderas man att sätta alla properties till private som default, och att man istället reglerar det sättet
som en användare kan interagera med objektets data med publika metoder, där två väldigt vanliga varianter är set och get.</p>

<p>När jag överblickar kodbasen som ligger till grund för våran första kmom01-version av symfony-bygget,
så har jag lite tudelade känslor.</p>

<p>Det har gått smidigt, och det har varit trevligt, att komma igång och jobba med ramverket,
men kan samtidigt känna att det upplevs som aningen bloated, speciellt i relation till våra hittills väldigt modesta sidor.</p>

<p>Har på ett personligt plan en rätt så stark minimalistisk ådra, så det är väl någonting som instinktivt skaver lite där.</p>

<p>Samtidigt har jag förstått att väldigt mycket, om inte den absoluta majoriteten, av den webbutveckling
som man kommer att möta ute i arbetslivet kretsar kring arbete i olika typer av ramverk, så det är nyttigt och viktigt
att bekanta sig med dem, och det ska bli intressant att se om och hur ens uppfattning och förståelse
kommer evolvera under kursens gång i arbetet med exemplet i Symfony.</p>

<p>PHP - The Right Way verkar vara en väldigt lovande resurs. Förefaller vara ovanligt kärnfull, insiktsfull och välskriven.</p>

<p>The Basics-sektionen är utmärkt, bokmärkt, och redan läst ett par gånger.</p>

<p>De kortfattade och klara redogörelserna för programparadigmen och namespaces, samt sektionen kring säkerhet,
var några delar som stod ut vid den första genomläsningen.</p>

<p>Mitt TIL, eller TWIL, är hur verkligt gediget man tycks kunna arbeta i php på ett objektorienterat sätt,
trots att det i relativa termer tillkom relativt sent "på riktigt", med riktigt seriös funktionalitet, i PHP 5.0 (2004) (läser jag innantill).
</p>

<p>Nåja, har ändå passerat tjugo år sedan dess, så kanske bättre uttryckt: imponerande ändå för ett språk som till en början saknade den objektrelaterade orienteringen.</p>

<p>MVH</p>

</div>




    <h2 class="report-rubric" id="kmom02">Kmom02</h2>
    <div class="report-container">

    <p>Ett arv handlar om "är en"/"is a"-förhållande klasser emellan, med en föräldraklass/superklass som
    barnklasser/subklasser först ärver grund-egenskaperna/metoderna ifrån, och därefter utökas/modifieras/specificeras ytterligare.
    </p>

    <p>
    I php görs det med nyckelordet extends, och för att illustrera det tar jag in ett exempel från min implementation,
    där subklassen DeckOfCards52 först ärver sin grundstruktur från superklassen DeckOfCards. Därefter plockas jokrarna bort,
    för att tillgängliggöra en användbar, spelbar kortlek: </p>

    <blockquote class="code-example">
    <pre>

        class DeckOfCards52 extends DeckOfCards
        {
            public function __construct()
            {
                parent::__construct();

                $this->removeJokers();
            }

        private function removeJokers(): void
        {
            $this->cards = array_filter($this->cards, function ($card) {
                return $card->getCardAsInt() !== 0;
            });

            $this->cards = array_values($this->cards);
        }
        }


    </pre>
    </blockquote>






    <p>Komposition handlar istället om ett har en/består av-förhållande, där en klass innehåller
    instanser av en eller flera klasser. Ett DeckOfCards (eller dess subklass DeckOfCards52) i mitt exempel
    består av 54 (52) Card-instanser.
    </p>

    <p> Traits är ett smidigt, men lösare, typ utav arv som frångår den vanliga arvshierarkin,
    som tillåter en klass att "låna" in funktionalitet från flera källor, att anamma flera "traits",
    vilket inte hade varit möjligt med en vanlig inheritance-syntax då php inte har stöd för
    multipelt arv.
    </p>

    <p>
    Det ger dessutom en flexibilitet
    och mångsidighet, och är på många sätt att föredra framför klassiskt multipelt arv som det finns stöd för i
    andra språk, som är bunden och begränsad av en mer rigid klasshierarki.
    <p>

    <p>Interface är en sinnrik konstruktion, som i någon mening snor på ordningen, och istället definerar och
    stipulerar vad för funktionalitet (vilka metoder) som ska finnas, och lämnar det upp till
    utvecklaren själv att lösa det.</p>

    <p>
    För ett exempel-gränssnitt (interface) som kräver printColor()-funktionalitet, så skulle en klass
    som implementerar det kunna se ut såhär:

    <blockquote class="code-example">
    <pre>
    interface InterfaceColor
    {
        public function printColor();
    }

    class Coffee implements InterfaceColor
    {
        const COLOR = "Black";
        public function printColor()
        {
            return self::COLOR;
        }
    }

    </p>
    </pre>
    </blockquote>
    </p>

    <p>Känner mig tillfreds med den klass-struktur jag fått på plats, och tror att den kommer visa
    sig någorlunda duglig att bygga fungerande, enklare spellogik kring, vilket stundar i nästa kursmoment.
    </p>

    <p>Valde att också lägga till en cardInt-property i Card-klassen, som kanske kan visa sig vara aningen överflödig,
    då det den åstadkommer redan borde kunna täckas av cardSuit och cardRank, men tänkte att det eventuellt
    skulle kunna visa sig vara värdefullt att ha tillgång till en int-property som är unik för varje kort.
    </p>

    <p>Kombinationen (cardSuit, cardRank) är ju redan unik, för att använda mig av SQL-klingande terminologi,
    men det är ju ändå bara en liten, modest ytterligare property, så den fick hänga med.</p>

    <p>Hade till en början bara $hand som en vanlig array-property innehållandes Card(s) i min Player-klass, och tänkte
    att det preliminärt skulle kunna vara tillräckligt, men gjorde det ordentligt och omstrukturerade och konstruerade en ordentlig
    CardHand-klass istället som en Player istället får inneha.</p>

    <p>Just nu ges ett ess cardRank = 14, vilket inte är helt riktigt, då det också
    kan vara = 1 i t ex en lägre stege i ett pokerexempel. Ämnar justera det på något bra sätt i
    nästa kursmoment när jag är igång med spellogiken.</p>

    <p>Huvudspåret är att främst använda mig av kortens Unicode-representation när jag ska visa upp korten
    i min spelimplementation, men finns även en enklare cardValue-property att tillgå.</p>

    <p>Arbetet med Symfony flyter på fint, och när man nu väl är igång och jobbar med den givna
    controller/route/template-strukturen så går det ju väldigt enkelt och smidigt att skapa nya routes
    och vyer.</p>

    <p>
    Etablerade även en enklare ytterligare LightDarkThemeController som fick hantera skiftandet mellan det mörka och det ljusa temat.
    </p>

    <p>
    Inte någon exemplarisk modulär struktur på css-koden hittills, men fungerar fint, och jobbar samlat vidare
    i app.css, och har etablerat en kompletterande app-dark-theme.css som läses in (efter app.css) i det fallet
    att det mörka temat är applicerat.
    </p>

    <p>
    Känns ovant att skriva commits i den form som rekommenderas i artikeln, men ska testa på det ordentligt
    i nästa kursmoment och verkligen försöka anamma den mer enhetliga, tydliga strukturen.
    </p>

    <p>
    Ett utav många TIL/*TWIL är hur smidig och tacksam session-hanteringen är med den SessionInterface som
    Symfony tillhandahåller.
    </p>

    <p>
    MVH
    </p>


    </div>


    <h2 class="report-rubric" id="kmom03">Kmom03</h2>
    <div class="report-container">

    <p>Är väl i ärlighetens namn kanske inte det mest exalterande att sätta sig ned med flödesdiagram
    och pseudokod, men det är väldigt bra och värdefulla konceptulla verktyg, inte minst som bryggor
    för att bättre kunna kommunicera med och visualisera för ickeprogrammerare på ett mer lättillgängligt sätt.
    </p>

    <p>Det tvingar en dessutom att skärpa sinnena gällande hur man faktiskt i grova drag tänker sig att
    man ska ta sig an och lösa den givna uppgiften, och i vilka steg det kan tänkas vara rimligt
    att jobba.
    Bra att ha med sig i verktygslådan. (Klingar misstänkt som en generisk boilerplate-kommentar, och metaforen är utsliten,
    men menar det faktiskt genuint.) </p>

    <p>Roligt och stimulerande miniprojekt, som jag tyckte artade sig bra, i form av ett enklare
    Blackjack-spel, med aningen modifierade regler, som fungerar fint, och som jag tycker är ett nöje att
    interagera med.</p>

    <p>Valde att lägga en hel del tid på att vrida och vända och experimentera för att få till det på ett
    för mig snyggt och tillfredställande sätt, och ansåg att det var värt den tidsinvesteringen.
    Tänker att jag nog kommer kunna ha nytta av den etablerade gedigna grova strukturen och stylingen
    också senare när det vankas projektarbete.</p>

    <p>La phpstan-ribban på lvl8, vilket jag upplevde var en strikt men ändå fullt rimligt
    nivå, där synpunkterna var av den arten att man nästan alltid motvilligt fick nicka
    medgvivande och tillstå att verktyget ändå har rätt.

    Kan väl säkert sägas om lvl9 också, med bättre insikt, och i vissa kontext, men där kändes spontant
    de ytterligare synpunkterna mer småsinta och petitessartade, så fick bli lvl8, åtminstone tillsvidare.

    </p>

    <p>Nöjd med hur klasstrukturen, mina Controllers och applikationen i stort artade sig.</p>

    <p>
    Valde också att flytta över den handrelaterade-logiken som hörde till BlackjackPlayer-klassen in
    i ett trait som får inkluderas, för en aningen bättre organiserad och separarerad struktur.
    Får kanske möjlighet att också jobba med interface ordentligt i projektet vad det lider.</p>

    <p>Hade kunnat baka in hela det pågående spel-statet i ett eget objekt, och byggt en mer
    ren klass utifrån den utgångspunkten, och sedan endast sparat undan det i sessionen mellan routerna,
    för ett riktigt cleant och minimalistiskt session-flöde, men landade i den här varianten istället,
    där huvudsakligen dealer- och player-objekten konkar på all data. Routerna och antalet
    session-variabler får ändå betraktas (hoppas jag) som relativt sparsmakade och "lean".</p>

    <p>Använder mig nu istället av en BlackjackGameResults-klass
    när en runda avslutas för att rätta händerna enligt de givna premisserna, korrekt omfördela markerna,
    resetta properties etc., samt för att att kontrollera om den avslutade rundan också innebär ett
    avslutat spel.  </p>

    <p>Arbetet i och med Symfony flyter vidare på alldeles utmärkt, och tycker fortsatt att ramverket
    känns lättarbetat och intuitivt.</p>

    <p>Mitt TIL/*TWIL i detta kursmoment, för att denna gång nämna någonting php-specifikt: vilken smidig
    konstruktion referens-parametrar är (dock med sina fördelar och nackdelar, man ska som alltid
    vara väl medveten om var och varför man använder den), som tillåter en att uppdatera inskickade
    argument-variabler dynamiskt utan att explicit returnera någonting från funktionen, lämpliga i t ex
    enklare funktioner där man vill inkrementera värden.</p>

    <p>MVH</p>

    </div>



    <h2 class="report-rubric" id="kmom04">Kmom04</h2>

    <div class="report-container">

    <p>Sådärja, ytterligare ett kursmoment kan läggas till handlingarna.</p>

    <p>Det har varit roligt och intressant, men tidskrävande, att bekanta sig med
    testning även när det gäller objektorienterad php.</p>

    <p>PHPUnit var ett nöje att introduceras till. Det tillhandahåller ett riktigt omfattande
    och trevligt assert-urval, och fann det tydligt och lättarbetat överlag.
    </p>

    <p>Lyckades etablera 100% för alla klasser, kändes lika bra att göra det ordentligt
    när man ändå var igång, även om de noteringarna i sig inte nödvändigtvis innebär
    att man konstruerat riktigt bra och relevanta tester.</p>

    <p>Det var några klasser jag inte kunde ta mig förbi ~ 95% på egen hand, men då
    fanns ju den detaljerade test-webbrapporten att tillgå, som
    uttryckligen kunde visa vilka faktiska rader och avgreningar som det inte fanns testteckning för.
    Tacksamt. Imponerande. Chapeau till den som konstruerat det verktyget.</p>

    <p>Gjorde några småjusteringar i koden, där jag slimmade ned och även kunde trimma bort några uppenbart
    onödiga metoder.</p>

    <p>
    Satte också ett tag en boolean-parameter i min DeckOfCard-konstruktor, för att konditionellt
    kunna konstruera en tom kortlek för användning i testningen.
    Smart, tänkte jag då, men icket, då det genererade en motiverad men irriterande:</p>

    <p>
    <div class="code-example">
    The method  __construct has a boolean flag argument $populate, which is a certain sign of a Single Responsibility Principle violation.
    BooleanArgumentFlag
    <br>
    <br>
    </div>
    </p>

    <p>
    ...och efter att ett tag försökt att deaktivera den varningen, vilket är en tveksam väg att vandra,
    så kom jag på bättre tankar, tog min medicin, och plockade bort den och etablerade en enkel kompletterande
    emptyDeck()-metod istället som fick sköta det jobbet.</p>

    <p>Lät dock phpmd-synpunkterna avseende övertaliga public methods i testfilerna bero, då jag ville
    följa den cleana standarden med src-matchande klassnamn+Test, och inte börja bryta ut i separata
    ytterligare filer.</p>

    <p>Tycker att det i regel gått ganska bra att testa min kod, men testerna expanderade i omfattning,
    i relation till de mångtaliga metoderna generellt i klasstrukturena, och jag har fått mig en
    bra tankeställare och påminnelse gällande vikten av att skriva bra, koncis, ren kod, med SRP som
    ledstjärna när klasserna konstureras (dock lättare sagt än gjort) - och att hålla nere på de metoder
    som man så lättsamt skapar ad hoc när man är igång och utvecklar.</p>

    <p>Det kan man ju visserligen fortsatt göra iofs, men då bör man också behärska
    konsten att refaktorera på ett bra och effektivt sätt, för att senare kunna slimma ned koden
    och kasta eventuell överflödig barlast överbord.</p>

    <p>
    Ett fullblodsproffs hade kunnat etablera samma funktionalitet med mycket mindre kod,
    som i sig skulle behöva mindre omfattande testning.</p>

    <p>
    Mitt TIL/*TWIL är att man alltid ska ha med sig i bakhuvudet när man kodar: koden jag skriver nu ska
    jag också i regel kunna testa på ett bra och rimligt sätt, och sväller kodomfattningen,
    så sväller också kodskulden avseende att skapa testteckning för densamma.</p>

    <p>
    MVH
    </p>

   </div>


    <h2 class="report-rubric" id="kmom05">Kmom05</h2>

    <div class="report-container">
    <p>Övningen flöt på bra och var välstrukturerad. Såg direkt till att etablera och försäkra mig om att den lokala
    utvecklingsmiljön fungerande (med mariadb), så att jag kunde sätta igång. Det är kanske inte jätteexalterande, men desto mer lärorikt, att själv (med goda instruktioner) få se till att
    kunna få på plats den här typen av konfiguration.

    (Tog ut segern i förskott när det gällde det jag trodde var en fungerande konfiguration även på studentservern, efter att jag jobbat
    mig igenom även den övningen, men mer om det på Canvas.)



    <p>Var ju väldigt smidigt att klicka sig igenom och etablera grundstrukturen för den givna tabellen/klassen,
    alltså med entity/repository/controller som Doctrine insisterar på, med getters/setters autogenererade.
    </p>

    <p>
    Nu är de ju i sig i sin mycket basala form varken svåra eller tidskrävande
    att etablera själv heller, men man får dem serverade på ett fat automatiskt,
    med en enhetlig get-/setProperty-namnstandard.
    </p>

    <p>Försökte bygga upp en trevlig Library-interface, med lite svg-utsmyckningar och
    min sidofågel som nyfiket hänger med i de olika vyerna.</p>

    <p>Stylingen och färgschemat på tabellerna, formulären och den svg-bibilioteksbokhylla som möter
    användaren i Library-indexvyn harmoniserar, och upplever att användarinterfacet och flödet är trevligt
    och håller ihop i all sin enkelhet.</p>

    <p>Avseende CRUD-strukturen, så tyckte jag att Doctrines ORM-struktur glimrade till när det gällde
    att enkelt skapa/uppdatera tabellrader i databasen på sitt objektorienterade sätt i POST-routerna, med
    glasklara och raka set-kommandon för varje property.</p>

    <p>
    Nu är det ju heller inte särkilt komplicerat att göra detsamma med en ren SQL-förfrågan,
    men här blir det extra tydligt vad det är som sker (för en som generellt är
    objektorienterat programmeringsbevandrad). Kanske kan den "objektivt" anses vara mer
    lättbegriplig och klar än den vanliga query-syntaxen, som ändå förutsätter att man behärskar lite grundläggande SQL.
    </p>

    <p>Tycker det var en bra introduktion till ORM överlag, och upplevde att det hann täckas in en hel del
    matnyttigt i ett sådant här tidsmässigt ändå ganska begränsat kursmoment.
    </p>

    <p>
    Nu har vi fått möjligheten att jobba med tre huvudsakliga tillvägagångssätt när det gäller att interagera med
    databaser i php: enklare PDO där SQL-querys skrevs direkt i programkoden med placeholders (webtec-kursen), en mer tydlig
    avgränsning där all SQL-kod för ett givet syfte läggs i en lagrad procedur (med ev kompletterande triggers) som exekveras inuti en
    dedikerad applikationsfunktion i databas-kursen, och nu en annan variant där SQL-queries mot en objektifierad databas huvudsakligen
    sköts genom ett av ramverket tillhandahållet mellanlager med en php-fierad syntax (eller med en ren SQL-sats direkt i
    funktionen om man föredrar det).
    </p>

    <p>Vi har ju bara hunnit skrapat på ytan hittills, så kan inte än bedöma hur det är att arbeta på ett mer sofistikerat
    sätt med ORM i tex Doctrine, men spontant fann jag det helt okej, även om det var aningen omständigare när man t ex
    ville göra småjusteringar i entity-klassen (i.e, tabellstrukturen/schemat) manuellt i efterhand. Enklare och snabbare att etablera, krångligare
    och sämre när man vill finslipa och skräddarsy, eventuellt.</p>


    <p>Mitt TIL/*TWIL är på vilket sinnrikt sätt ett ORM-ramverk som Doctrine tillåter en att interagera och jobba mot en
    relationsdatabas på ett objektorienterat sätt, samtidigt som det kan förhålla sig agnostiskt när det kommer till vilken
    databashanterare som används.
    </p>

    <p>MVH</p>

    </div>


    <h2 class="report-rubric" id="kmom06">Kmom06</h2>
    <div class="report-container">
    <p>Sista reguljära kursmomentet avbockat.</p>

    <p>Phpmetrics var ett nöje att introduceras till, och tycker att det hade ett väldigt
    tydligt, lättarbetat gränssnitt, i synnerhet i html-rapporterna.</p>

    <p>Vi är visuella varelser, så ögonen drog sig direkt till det stilrena kluster av färgade
    bollar (varje boll motsvarande en klass) som möter en i Overview, i representativa
    färger beroende på hur de respektive klasserna presterar avseende maintainability/complexity.
    </p>

    <p>De överblickande statistik-vyerna för klasserna var tydliga och bra,
    även om noteringarna i Violations var av en mer vag, oklar och abstrakt art.</p>

    <p>LCOM, Class cyclomatic complexity, Max method cyclomatic complexity var de mätvärden
    jag fokuserade mest på, utöver de övergripande maintainability/complexity-värdena.</p>

    <p>Det gick bra att integrera med Scrutinizer, när den initiella analysen väl tuggade igång,
    och fick ett väldigt bra första intryck av verktyget, som förefaller vara väldigt
    pedagogiskt, tydligt och lättarbetat.</p>

    <p>Noterade en 9.95-score vid första försöket, med 100% kodtäckning
    (av de inkluderade klasserna tål att tilläggas).
    </p>

    <p>När det gäller Issues, så är den till skillnad mot phpmetrics istället
    väldigt konkret, och visar upp de exakta kodpartier den har synpunkter på, med utförliga beskrivningar.
    </p>

    <p>Scrutinizer har betydligt större acceptans och tolerans än phpmetrics när det kommer till
    komplexa, större klasser och metoder,
    på gott och ont, och verktyget verkar vara villigt att ge grönt ljus till rätt så mycket givet
    att man bygger tillbörliga validerande tester till dem.</p>
    </p>

    <p>Smidigt att den dessutom är kapabel att automatiskt köra igång en ny analys vid varje färsk commit.</p>

    <p>Jag tror definitivt att man det är möjligt att bilda sig en hygglig, preliminär bild över ett projekts kodkvalitet
    genom att studera dess badges, även om man bör sätta stora asterisks vid varje indikator, då de kan
    visa sig vara både rättvisande och missledande, beroende på en rad faktorer, t ex hur mycket kod man inkluderar
    för testning.
    </p>

    <p>
        TIL/*TWIL vilka grymma verktyg Phpmetrics och Scrutinizer är att ha med sig i verktygslådan.
    </p>

    <p>Vidare mot projektet!</p>

    <p>MVH</p>



</div>

    <h2 class="report-rubric" id="projekt">Projekt</h2>
<div class="report-container">
    <h2 class="rubric">Krav 1-3</h2>

<p>Började med att skapa en grov stylingmässig struktur för det nya projektet, där jag lekte
runt med lite olika bakgrunder, navbar-strukturer etc., innan den mer konkreta projektidén började
utkristalliseras.</p>

<p>Landade i katt-temat som inbjuder till en liten storyline och twist, som fick ackompanjera
och liva upp Poker Patience-bygget, som trots allt var den huvudsakliga pjäsen.</p>

<p>Som jag redogör för även i texten avseende advanced features i Krav 6, så inledde jag med
att bygga upp en liknande struktur med reroutes som jag gjort för Blackjack-spelet, och fick på
plats en grovt fungerande variant.</p>

<p>Kände dock att den var lite träig, och att det konstanta hoppandet mellan routes efter varje
kortutplacering i gridet störde användarupplevelsen, så började istället fila på en lösning där
man kan jobba utifrån SAP med en dynamisk JSON-AJAX-reqest.</p>

<p>Där fick jag väldigt god nytta av mina korts unika, säregna cardInt-properties, som innehåller
både suit (1XX, 2XX, 3XX, 4XX)  och rank (X02-X14), och kunde minimalistiskt bara spara undan det
i en array med 25 värden motsvarande alla indexpositioner i 5x5-gridet.</p>

<p>Efter att ha filat lite på min EvaluateHands-klass, så kunde jag också till slut använda mig av
den direkt i den update-routen, och jobba direkt mot den gridstrukturen som var etablerad,
där jag även höll koll på de 5 horizontella och 5 vertikala händerna, och kunde skicka tillbaka
de värdena för att ge användaren dynamiska uppdateringar i anslutning till gameplay-gridet.</p>

<p>Slimmade ned det som var 4-5 konceptuella klasser i arbetet med det här, till två,
EvaluateHands och PokerPatienceGrid, och några tillhörande avlastande traits.</p>

<p>Är nöjd med hur det artade sig.</p>

<p>Igen, för att lyfta humöret litegrann, och ha en liten rolig twist, så är själva utmaningen
som användaren ställs inför: att besegra katten i både Poker Patience och Blackjack, för att på
så sätt kunna frigöra den tillfångatagna och inburade fågeln.</p>

<p>Blackjack-logiken var ju redan på plats, och behövdes bara lite småmodifikationer för att pussla
in det i det här konceptet. Katten och användaren börjar med 500 marker vardera, 100 per hand,
och satsar allt i varje runda, tills det att man har en vinnare, för att hålla det kort och
koncist, inte minst för er rättare.</p>

<p>Satte även kattens framslumpade PokerPatience-score som man spelar mot artificiellt lågt,
så att ni inte ska behöva sitta och traggla och lägga ett grymt parti för att på ett vettigt
sätt kunna rätta och gå igenom arbetet.</p>

<h2 class="rubric">Krav 4</h2>

<p>Etablerandet av ett antal JSON-API-routes var väl det minst arbetsintensiva av kraven, även om
mycket av arbetet med huvudkravet också involverade JSON i den dynamiska uppdateringen, och de går
in i varandra litegrann på det sättet.</p>

<p>Men för den faktiska proj/api-routen:</p>

<p>Etablerad två GET-routes kopplade till project-book/project-library: en för att visa alla
poker- och blackjack-relaterade böcker i databasen, och en för att visa en specifik, där man
använder sig av bokens ISBN-nummer.</p>

<p>Därefter har vi en GET-route som visar gamestate-statusen för den JSON-struktur som uppdateras
dynamiskt för Poker Patience-spelet, baserat på gameplay_grid-noteringen som sparas undan i session.</p>

<p>Slutligen har vi ytterligare två HighscoreEntry-relaterade routes: en för att visa upp alla
entries i highscore-tabellen, och en för att registrera in en ny highscore-score utifrån
formulärdata.</p>

<p>Körde en liten ytterligare dynamisk bonusvariant också, och byggde ytterligare en kontroller,
i marginalen, för att kunna skicka iväg och skapa en ny entry när användaren har lagt klart
pokerpatiensen och vill registrera sin score till highscoren.</p>

<p>JSON är ju en fantastiskt mångsidig struktur, och det känns som att det är väldigt många
avenyer och dörrar som öppnar sig om man lär sig att verkligen behärska och bemästra den
och det här sättet att jobba mot ett API.</p>

<h2 class="rubric">Krav 5</h2>

<p>De ytterligare databastabellerna jag etablerade var inte av någon jätteavancerad eller
sofistikerad art, men kompletterade mitt projektupplägg på ett bra sätt.</p>

<p>En project_book-tabell - ProjectBook-Entity- och -Repository - som fick innehålla poker- och
blackjackrelaterade böcker, som teoretiskt, i trippel bemärkelse, ämnar kunna understödja
användaren i sin hjärnornas kamp mot katten.</p>

<p>Den var mer eller mindre en karbonkopia av den Book-klass jag etablerade i tidigare kursmoment,
så inte någon fruktansvärd arbetsinsats där, men omarbetade bokinnehållet utifrån temat, och
kompenserade med att piffa upp stylingen ordentligt på ett trevligt sätt.</p>

<p>Det var också banalt nog här jag åkte på min tuffaste tidsmässiga dikeskörning, och spenderade
några timmar, där jag inte fick min create-book-project-route att fungera, trots att allt annat
fungerade avseende view/update/delete för en given bok, efter att ha använt mig av den mall som
jag etablerat i tidigare kursmoment för template/Controller.</p>

<p>Försökte vrida och vända, felsöka, logga, men kunde inte lista ut problemet, och fick inte
några klara felmeddelanden som kunde peka mig i rätt riktning heller, utan formuläret bara
nollställdes efter det att jag submittat.</p>

<p>Felet var att jag använt mig av path-name-routen i min submit och för att interagera med
Controllern, och överblickat den faktiska route-adressen, som jag ansåg mer eller mindre
irrelevant i sammanhanget, och hade missat att justera den, som fortsatt var densamma som
den karbonkopierade create-book routen från kmom05.</p>

<p>Ibland är man blind för de mest triviala och enkla av lösningar.
Ni har förmodligen stött på det här problemet för studenter tidigare otaliga gånger, men om inte,
så finns det en liten felmeddelandemässig lucka där, och kan eventuellt vara värt att göra en
notering, och kunna tipsa studenter som kört fast med sin CRUD-konstruktion att verkligen
dubbelkolla det.</p>

<p>Den andra tabllen highscore_entry - HighscoreEntry-Entity och Repository - ansvarar istället
för min highscore implementation.</p>

<p>Inte så väldigt mycket mer att tillägga här som jag inte redan redogjort för i
about-database-texten, men ORM-strukturen i Doctrine var en trevlig bekantskap, och det var ett intressant
alternativt sätt att jobba med och mot en databas.</p>

<h2 class="rubric">Krav 6</h2>

<p>Eventuellt trevligare formatering i den <a href="{{ path('about_advf_proj') }}">dedikerade routen</a> på projektsidan, men kommer här också:</p>

<h2>Feature 1</h2>

<p>Den första featuren jag väljer att lyfta fram är den friktionsfria Poker
Patience-gameplay-implementationen.</p>

<p>Började initiellt med att konstruera en liknande struktur som för Blackjack-spelet, där jag
mellanlandade i routerna efter varje post-request när en användare placerar ut ett kort.</p>

<p>Habilt, helt okej, men det stör flytet i spelet lite, och jag tycker att det blev extra
påtagligt när man tar sig an en Poker Patience, där det är trevligt att kunna få lägga ut
korten ostört och fokuserat, utan att kastas in och ut mellan routes.</p>

<p>Så började fila på en annan variant, där jag fick riktigt god användning av de kortunika
cardInt-attributen som jag etablerade tidigt i kursen för mina Card-objekt, där jag kunde
uppdatera och lägga in det kort som utplacerats i gridet i en motsvarande JSON-array med 25
indexpositioner, med en asynkron JSON-AJAX-request, alltså understödd av lite JS, vilket
möjliggör en implementation utan hackiga omdirigeringar (enligt SPA om man ska fortsätta
droppa akronymer).</p>

<p>Blev en i mitt tycke väldigt trevlig och bra lösning i slutändan, och bidrog till en mycket
bättre användarupplevelse.</p>

<p>
Hade också lite problem till en början med att den ibland kunde lagga till, och innan det att ett
nytt kort hunnit genererats efter ett klick, så kunde man av misstag placera ut samma kort två
gånger, vilket 1. inte är bra eller rätt, och 2. dessutom satte spellogiken ordentligt ur fas.</p>

<p>Löste det med att temporärt inaktivera alla pointerevents från den tidpunkten att en användare
klickar på ett kort, för att sedan återaktivera i slutet av den logiska följden där
JSON-uppdateringen är avklarad och allt har bearbetats. Artade sig utmärkt.</p>

<h2>Feature 2</h2>
<p>
I ovan nämnda etablerade poker patience-omarbetning, så var det ändå någonting som saknades,
nämligen, att också kunna möjliggöra dynamisk poänguppdatering i anslutning till
25-korts-spelgridet av de 5 horizontella och 5 vertikala händerna.</p>

<p>Omkonstruerade därför min evaluate klass så att den också skulle kunna vara kapabel att
jobba mot det här gridformatet, där den nu får köra sina uppdateringar dynamiskt i den
update-routen i samband med att ett kort läggs till.</p>

<p>
Och även om både rank och suit-attribut fanns tillgängliga att arbeta med Card-klassen, så
fungerar ju mitt cardInt-attribut alldeles utmärkt allena, inte bara som en smidig säregen
pseudo-primärnyckel-identifikator i JSON-gridet, för att blanda in lite SQL-terminologi,
för både suiten (1XX, 2XX, 3XX, 4XX) finns ju tillgänlig, och likaså ranken (X02-X14),
och den räcker ju mer än väl till att bygga upp huvudlogiken kring.</p>

<p>Kunde därför på ett cleant och direkt sätt jobba direkt mot det etablerade gridet, och
bygga upp min handutvärderingsklass utifrån det.</p>

<h2>Feature 3</h2>
<p>Den tredje featuren jag väljer att lyfta fram, är av en mindre komplex, men ändå
(inbillar jag mig) någorlunda sinnrik art.</p>

<p>Etablerade nämligen två nya base-templates för att komplettera den jag använt mig tidigare
i kursen: project-base, som utgör den kattorienterade huvudbackdroppen för projektsidan, och
ytterligare en, project-base-library, som jag använde mig av i alla mina
project-library/project-book-relaterade vyer.</p>

<p>Kunde också manipulera och applicera basen konditionellt med en project_game satt
session-boolean, och därför använda mig av samma Controllers, routes och templates för
blackjack-gameplayen som jag etaalerat tidigare, för att inte behöva skapa onödiga,
icke-DRY och potentiellt problematiska kopior in i absurdum. Väldigt smidigt.</p>

<p>Anpassade även lite annat med samma konditionella logik i Blackjack-routerna, där jag
plockade bort den tidigare fågeln (som ju blivit instängd i en bur av katten, vilket är
projektets huvud-storyline), ändrade lite styling och anpassade kattens syrliga kommentarer
beroende på resultat och status.</p>

<h2>Feature 4</h2>
<p>
Beskrivningen av fjärde featuren håller jag föredömligt kort, och är av en mer generell natur:
har lagt en allmänt ordentlig insats på styling och detaljfronten, med animationer, interaktion,
spelflöde och kommentarer, som jag upplever harmoniserar och knyter ihop hela paketet till ett
trevlig och sammanhållet koncept.</p>

<h2 class="rubric">Allmänt om Projektet</h2>

<p>Projektarbetet har flytit på bra, och har varit en ovanligt trevlig avslutning på en kurs.
Har ett kortspelsintresse och en pokerbakgrund, och uppskattar projektupplägg där man ges relativt
fria tyglar, så det här föll mig verkligen på läppen.</p>

<p>Har redogjort för de problem och de lösningar på ett ganska uttömmande sätt, men tänkte att det
kunde vara värt att resonera lite kring de linters och validerings- och kvalitetssäkringsverktyg vi
arbetat med i kursen och även här i projektet.</p>

<p>Tycker att det är en riktigt gedigen uppsättning, som täcker in aspekter kring kodkvalité från
olika infallsvinklar, men där de inte alltid är helt överrens gällande vad som ska prioriteras
när det kommer till syntax och struktur.</p>

<p>Minimalistiska klasser, metoder och Controllers avseende storlek och komplexitet, med få
konditionella avgreningar, och helst inga else-satser alls, rimmar inte alltid till 100% väl med
ordentliga typechecks och gedigen felhantering.</p>

<p>Inte det enklaste alla gånger att få till den balansen, och att få till idel gröna php-metrics
noteringar för mina klasser och Controllers i kmom06 krävde mycket omstuvning och utflyttning i
separate Controllers och traits, som visserligen till stora delar var nyttig, men även i vissa
avseenden försämrade koden och gjorde den i mitt tycke mer spretig och osammanhängande.</p>

<p>Valde därför att inte vara fullt så kategorisk i projektarbetet, även om nästan alla av de
nyintroducerade klasserna och Controllers lyser grönt, och lät två gula prickar bero kring 80% MI,
efter lite omarbetning, där jag inte kände att det skulle väsentligt förbättra kodkvalitén och
tydligheten att lyfta ut/refaktorera någonting mer in i absurdum.</p>

<p>HandEvaluationTrait (som tillsammans med HandScoringTrait var de två gula) var också det enda
stället i hela koden där jag aktivt avvaktiverade en synpunkt med:
@SuppressWarnings("PHPMD.CyclomaticComplexity").</p>

<p>Hade det varit svart och vitt, eller grönt och rött, en definitiv indikator, och inte bara en
generellt bra vägvisande sådan, hade det varit värt det att verkligen alltid vrida och vända och
jaga gröna prickar och grönt ljus.</p>

<p>Men iom att  det här är flytande begrepp, och att det här är värden och tillvägagångsätt
som man ständigt får väga mot varandra och i relation till det man håller på med, så får man
passa sig för att stirra sig blind och bli alltför kategorisk och dogmatisk.</p>

<p>Detsamma kan sägas om Scrutinizer (10 score, 100% täckning av relevanta klasserna), med
synpunkter av annan art, men som också det sammantaget var ett väldigt bra verktyg.</p>

<p>Nog om det.</p>

<p>
I övrigt tycker jag att projektet var en vettig avslutning på kursen, som tog rimligt med tid i
anspråk, även om jag valde att logga lite övertaliga timmar för att få till det på ett för mig
riktigt tillfredsställande sätt.</p>



<h2 class="rubric">Avslutande ord om kursen</h2>

<p>Tycker att det har varit en riktigt givande och bra kurs, och en utav de roligaste hittills, i
hård konkurrens.</p>

<p>De konceptuella genomgångarna som ackompanjerar varje kurmoment är _riktigt_ bra, som vanligt,
och skulle rekommendera även andra kursansvariga att överväga att anamma det konceptet:
att verkligen försöka samla de övergripande koncept som ska täckas in i den typen av riktigt
genomarbetade genomgångar, som (precis som välkonstruerad kod) kan återanvändas från år till år.</p>

<p>Sedan kan genomgångarna och tisdagszoomarna på veckobasis vara lite mer uppsläppta och
informella.</p>

<p>Har sympati för att det kan vara tradigt och svårt att verkligen vara hundraprocentigt
motiverad till att naila det när man drar liknande grejer varje år, och att kursinnehållet ändras
och omarbetas på kontinuerlig basis, men att det som kan täckas in mer övergripande verkligen
gynnas av att göra det i det här väldigt uppstyrda och seriösa formatet.</p>

<p>Stabila genomgångar överlag, bra testgenomgång av Marie, habila läroresurser.</p>

<p>Eventuella frågetecken har kunnat rätas ut i Discord-chatten som vanligt.</p>

<p>Har alltsomoftast tenderat att landa i stabila 8:or när jag satt betyg på kurserna jag
hittills läst, en stabil och hög nivå, men här viktar det över i en 9:a. Väldigt bra.</p>

<p>Stort tack till lärarteamet (och rättarteamet) för deras arbete, och på återhörande.</p>

</div>

{% endblock %}